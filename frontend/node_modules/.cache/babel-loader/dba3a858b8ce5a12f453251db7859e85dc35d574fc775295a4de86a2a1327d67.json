{"ast":null,"code":"var _jsxFileName = \"/Users/geraldobuseh/Downloads/student-assist-bot/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { ExclamationCircleIcon } from '@heroicons/react/24/outline';\n\n// Constants\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:5000';\nconst INITIAL_MESSAGE = 'Hello!';\nconst SUBJECTS = {\n  math: {\n    name: 'Mathematics',\n    description: 'Algebra, Calculus, Geometry, and more',\n    icon: '📐'\n  },\n  science: {\n    name: 'Science',\n    description: 'Physics, Chemistry, Biology',\n    icon: '🔬'\n  },\n  history: {\n    name: 'History',\n    description: 'World History, US History, Ancient Civilizations',\n    icon: '📜'\n  },\n  english: {\n    name: 'English',\n    description: 'Literature, Writing, Grammar',\n    icon: '📚'\n  },\n  programming: {\n    name: 'Programming',\n    description: 'Coding, Algorithms, Computer Science',\n    icon: '💻'\n  }\n};\n\n// Helper function to convert markdown-like formatting to HTML\nconst formatMessage = content => {\n  // Split content into lines\n  const lines = content.split('\\n');\n  let formattedContent = '';\n  let currentList = '';\n  let inList = false;\n  let isFirstParagraph = true;\n  lines.forEach(line => {\n    // Handle bold text first (before other formatting)\n    line = line.replace(/\\*\\*(.*?)\\*\\*/g, (match, text) => {\n      return `<strong>${text}</strong>`;\n    });\n\n    // Handle headings\n    if (line.startsWith('# ')) {\n      formattedContent += `<h2>${line.substring(2)}</h2>`;\n      return;\n    }\n    if (line.startsWith('## ')) {\n      formattedContent += `<h3>${line.substring(3)}</h3>`;\n      return;\n    }\n\n    // Handle italic text\n    line = line.replace(/\\*(.*?)\\*/g, '<em>$1</em>');\n\n    // Handle lists\n    if (line.trim().startsWith('* ')) {\n      if (!inList) {\n        inList = true;\n        currentList = '<ul class=\"topic-list\">';\n      }\n      currentList += `<li>${line.substring(2).trim()}</li>`;\n      return;\n    } else if (inList) {\n      inList = false;\n      formattedContent += currentList + '</ul>';\n      currentList = '';\n    }\n\n    // Handle example blocks\n    if (line.startsWith('Example:')) {\n      formattedContent += `<div class=\"example\">${line.substring(8).trim()}</div>`;\n      return;\n    }\n\n    // Handle notes\n    if (line.startsWith('Note:')) {\n      formattedContent += `<div class=\"note\">${line.substring(5).trim()}</div>`;\n      return;\n    }\n\n    // Handle regular paragraphs\n    if (line.trim()) {\n      if (isFirstParagraph) {\n        formattedContent += `<p class=\"intro\">${line}</p>`;\n        isFirstParagraph = false;\n      } else {\n        formattedContent += `<p>${line}</p>`;\n      }\n    }\n  });\n\n  // Close any open list\n  if (inList) {\n    formattedContent += currentList + '</ul>';\n  }\n  return formattedContent;\n};\nfunction App() {\n  _s();\n  // State management\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedSubject, setSelectedSubject] = useState(null);\n  const [showSubjectSelector, setShowSubjectSelector] = useState(true);\n  const messagesEndRef = useRef(null);\n\n  // Auto-scroll to bottom when messages change\n  const scrollToBottom = useCallback(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, []);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  // Error handling helper\n  const handleError = useCallback(err => {\n    var _err$response, _err$response2;\n    console.error('Error in API call:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err);\n    const errorDetails = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || {};\n    setError(`Error: ${errorDetails.error || 'Failed to send message'}\\n` + `Details: ${errorDetails.details || 'Please try again'}\\n` + (errorDetails.code ? `Code: ${errorDetails.code}\\n` : '') + (errorDetails.type ? `Type: ${errorDetails.type}` : ''));\n  }, []);\n\n  // Message sending logic\n  const sendMessage = useCallback(async (messageContent = null) => {\n    const content = messageContent || input.trim();\n    if (!content) return;\n    const userMsg = {\n      role: 'user',\n      content,\n      subject: selectedSubject\n    };\n    const newMessages = [...messages, userMsg];\n    setMessages(newMessages);\n    if (!messageContent) setInput('');\n    setError(null);\n    setIsLoading(true);\n    try {\n      const res = await axios.post(`${API_URL}/chat`, {\n        messages: newMessages,\n        subject: selectedSubject\n      });\n      const botMsg = res.data.message;\n      setMessages(prev => [...prev, botMsg]);\n    } catch (err) {\n      handleError(err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [input, messages, handleError, selectedSubject]);\n\n  // Keyboard event handler\n  const handleKeyPress = useCallback(e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  }, [sendMessage]);\n\n  // Send initial message\n  useEffect(() => {\n    if (messages.length === 0 && selectedSubject) {\n      sendMessage(`I need help with ${SUBJECTS[selectedSubject].name}`);\n    }\n  }, [messages.length, sendMessage, selectedSubject]);\n  const handleSubjectSelect = subject => {\n    setSelectedSubject(subject);\n    setShowSubjectSelector(false);\n    setMessages([]); // Clear previous messages when changing subjects\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"Student Assist Bot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), showSubjectSelector ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"subject-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Select a Subject\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"subject-grid\",\n        children: Object.entries(SUBJECTS).map(([key, subject]) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"subject-card\",\n          onClick: () => handleSubjectSelect(key),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"subject-icon\",\n            children: subject.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"subject-name\",\n            children: subject.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"subject-description\",\n            children: subject.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 17\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"subject-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"change-subject-btn\",\n          onClick: () => setShowSubjectSelector(true),\n          children: \"Change Subject\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"current-subject\",\n          children: [SUBJECTS[selectedSubject].icon, \" \", SUBJECTS[selectedSubject].name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-container\",\n        children: [messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.role}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message-content ${msg.format === 'formatted' ? 'formatted' : ''}`,\n            dangerouslySetInnerHTML: {\n              __html: msg.format === 'formatted' ? formatMessage(msg.content) : msg.content\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 17\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 15\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message assistant\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        role: \"alert\",\n        children: [/*#__PURE__*/_jsxDEV(ExclamationCircleIcon, {\n          \"aria-hidden\": \"true\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          style: {\n            whiteSpace: 'pre-wrap',\n            margin: 0\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: `Ask a question about ${SUBJECTS[selectedSubject].name}... (Press Enter to send)`,\n          rows: \"2\",\n          disabled: isLoading,\n          \"aria-label\": \"Message input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => sendMessage(),\n          disabled: isLoading || !input.trim(),\n          \"aria-label\": \"Send message\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rsfidKX8szzuG9+uKW4MUoKr2mI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","axios","ExclamationCircleIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","INITIAL_MESSAGE","SUBJECTS","math","name","description","icon","science","history","english","programming","formatMessage","content","lines","split","formattedContent","currentList","inList","isFirstParagraph","forEach","line","replace","match","text","startsWith","substring","trim","App","_s","input","setInput","messages","setMessages","isLoading","setIsLoading","error","setError","selectedSubject","setSelectedSubject","showSubjectSelector","setShowSubjectSelector","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleError","err","_err$response","_err$response2","console","response","data","errorDetails","details","code","type","sendMessage","messageContent","userMsg","role","subject","newMessages","res","post","botMsg","message","prev","handleKeyPress","e","key","shiftKey","preventDefault","length","handleSubjectSelect","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","onClick","msg","i","format","dangerouslySetInnerHTML","__html","ref","style","whiteSpace","margin","value","onChange","target","onKeyPress","placeholder","rows","disabled","_c","$RefreshReg$"],"sources":["/Users/geraldobuseh/Downloads/student-assist-bot/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { ExclamationCircleIcon } from '@heroicons/react/24/outline';\n\n// Constants\nconst API_URL = 'http://localhost:5000';\nconst INITIAL_MESSAGE = 'Hello!';\n\nconst SUBJECTS = {\n  math: {\n    name: 'Mathematics',\n    description: 'Algebra, Calculus, Geometry, and more',\n    icon: '📐'\n  },\n  science: {\n    name: 'Science',\n    description: 'Physics, Chemistry, Biology',\n    icon: '🔬'\n  },\n  history: {\n    name: 'History',\n    description: 'World History, US History, Ancient Civilizations',\n    icon: '📜'\n  },\n  english: {\n    name: 'English',\n    description: 'Literature, Writing, Grammar',\n    icon: '📚'\n  },\n  programming: {\n    name: 'Programming',\n    description: 'Coding, Algorithms, Computer Science',\n    icon: '💻'\n  }\n};\n\n// Helper function to convert markdown-like formatting to HTML\nconst formatMessage = (content) => {\n  // Split content into lines\n  const lines = content.split('\\n');\n  let formattedContent = '';\n  let currentList = '';\n  let inList = false;\n  let isFirstParagraph = true;\n\n  lines.forEach((line) => {\n    // Handle bold text first (before other formatting)\n    line = line.replace(/\\*\\*(.*?)\\*\\*/g, (match, text) => {\n      return `<strong>${text}</strong>`;\n    });\n\n    // Handle headings\n    if (line.startsWith('# ')) {\n      formattedContent += `<h2>${line.substring(2)}</h2>`;\n      return;\n    }\n    if (line.startsWith('## ')) {\n      formattedContent += `<h3>${line.substring(3)}</h3>`;\n      return;\n    }\n\n    // Handle italic text\n    line = line.replace(/\\*(.*?)\\*/g, '<em>$1</em>');\n\n    // Handle lists\n    if (line.trim().startsWith('* ')) {\n      if (!inList) {\n        inList = true;\n        currentList = '<ul class=\"topic-list\">';\n      }\n      currentList += `<li>${line.substring(2).trim()}</li>`;\n      return;\n    } else if (inList) {\n      inList = false;\n      formattedContent += currentList + '</ul>';\n      currentList = '';\n    }\n\n    // Handle example blocks\n    if (line.startsWith('Example:')) {\n      formattedContent += `<div class=\"example\">${line.substring(8).trim()}</div>`;\n      return;\n    }\n\n    // Handle notes\n    if (line.startsWith('Note:')) {\n      formattedContent += `<div class=\"note\">${line.substring(5).trim()}</div>`;\n      return;\n    }\n\n    // Handle regular paragraphs\n    if (line.trim()) {\n      if (isFirstParagraph) {\n        formattedContent += `<p class=\"intro\">${line}</p>`;\n        isFirstParagraph = false;\n      } else {\n        formattedContent += `<p>${line}</p>`;\n      }\n    }\n  });\n\n  // Close any open list\n  if (inList) {\n    formattedContent += currentList + '</ul>';\n  }\n\n  return formattedContent;\n};\n\nfunction App() {\n  // State management\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedSubject, setSelectedSubject] = useState(null);\n  const [showSubjectSelector, setShowSubjectSelector] = useState(true);\n  const messagesEndRef = useRef(null);\n\n  // Auto-scroll to bottom when messages change\n  const scrollToBottom = useCallback(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, []);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  // Error handling helper\n  const handleError = useCallback((err) => {\n    console.error('Error in API call:', err.response?.data || err);\n    const errorDetails = err.response?.data || {};\n    setError(\n      `Error: ${errorDetails.error || 'Failed to send message'}\\n` +\n      `Details: ${errorDetails.details || 'Please try again'}\\n` +\n      (errorDetails.code ? `Code: ${errorDetails.code}\\n` : '') +\n      (errorDetails.type ? `Type: ${errorDetails.type}` : '')\n    );\n  }, []);\n\n  // Message sending logic\n  const sendMessage = useCallback(async (messageContent = null) => {\n    const content = messageContent || input.trim();\n    if (!content) return;\n    \n    const userMsg = { \n      role: 'user', \n      content,\n      subject: selectedSubject\n    };\n    const newMessages = [...messages, userMsg];\n    setMessages(newMessages);\n    if (!messageContent) setInput('');\n    setError(null);\n    setIsLoading(true);\n\n    try {\n      const res = await axios.post(`${API_URL}/chat`, { \n        messages: newMessages,\n        subject: selectedSubject\n      });\n      const botMsg = res.data.message;\n      setMessages(prev => [...prev, botMsg]);\n    } catch (err) {\n      handleError(err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [input, messages, handleError, selectedSubject]);\n\n  // Keyboard event handler\n  const handleKeyPress = useCallback((e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  }, [sendMessage]);\n\n  // Send initial message\n  useEffect(() => {\n    if (messages.length === 0 && selectedSubject) {\n      sendMessage(`I need help with ${SUBJECTS[selectedSubject].name}`);\n    }\n  }, [messages.length, sendMessage, selectedSubject]);\n\n  const handleSubjectSelect = (subject) => {\n    setSelectedSubject(subject);\n    setShowSubjectSelector(false);\n    setMessages([]); // Clear previous messages when changing subjects\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"app-title\">Student Assist Bot</h1>\n      \n      {showSubjectSelector ? (\n        <div className=\"subject-selector\">\n          <h2>Select a Subject</h2>\n          <div className=\"subject-grid\">\n            {Object.entries(SUBJECTS).map(([key, subject]) => (\n              <button\n                key={key}\n                className=\"subject-card\"\n                onClick={() => handleSubjectSelect(key)}\n              >\n                <span className=\"subject-icon\">{subject.icon}</span>\n                <span className=\"subject-name\">{subject.name}</span>\n                <span className=\"subject-description\">{subject.description}</span>\n              </button>\n            ))}\n          </div>\n        </div>\n      ) : (\n        <>\n          <div className=\"subject-header\">\n            <button \n              className=\"change-subject-btn\"\n              onClick={() => setShowSubjectSelector(true)}\n            >\n              Change Subject\n            </button>\n            <h2 className=\"current-subject\">\n              {SUBJECTS[selectedSubject].icon} {SUBJECTS[selectedSubject].name}\n            </h2>\n          </div>\n\n          <div className=\"chat-container\">\n            {messages.map((msg, i) => (\n              <div key={i} className={`message ${msg.role}`}>\n                <div \n                  className={`message-content ${msg.format === 'formatted' ? 'formatted' : ''}`}\n                  dangerouslySetInnerHTML={{ \n                    __html: msg.format === 'formatted' ? formatMessage(msg.content) : msg.content \n                  }}\n                />\n              </div>\n            ))}\n            {isLoading && (\n              <div className=\"message assistant\">\n                <div className=\"typing-indicator\">\n                  <span className=\"dot\"></span>\n                  <span className=\"dot\"></span>\n                  <span className=\"dot\"></span>\n                </div>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n\n          {error && (\n            <div className=\"error-message\" role=\"alert\">\n              <ExclamationCircleIcon aria-hidden=\"true\" />\n              <pre style={{ whiteSpace: 'pre-wrap', margin: 0 }}>{error}</pre>\n            </div>\n          )}\n\n          <div className=\"input-container\">\n            <textarea\n              value={input}\n              onChange={e => setInput(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder={`Ask a question about ${SUBJECTS[selectedSubject].name}... (Press Enter to send)`}\n              rows=\"2\"\n              disabled={isLoading}\n              aria-label=\"Message input\"\n            />\n            <button\n              onClick={() => sendMessage()}\n              disabled={isLoading || !input.trim()}\n              aria-label=\"Send message\"\n            >\n              Send\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}